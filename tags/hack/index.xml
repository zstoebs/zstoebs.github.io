<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>hack on Zach Stoebner | ml • neuro • kū</title>
    <link>/tags/hack/</link>
    <description>Recent content in hack on Zach Stoebner | ml • neuro • kū</description>
    <image>
      <title>hack on Zach Stoebner | ml • neuro • kū</title>
      <link>/tags/hack/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.2.3 (Hugo 0.81.0)</generator>
    <language>en-US</language>
    <copyright>Copyright &amp;copy; Zachary Stoebner. Licensed under CC-BY-ND-4.0.</copyright>
    <lastBuildDate>Wed, 02 Mar 2022 00:26:50 UT</lastBuildDate>
    <atom:link href="/tags/hack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>how to host a Hugo After Dark site on GitHub Pages: a saga</title>
      <link>/projects/github-after-dark/</link>
      <pubDate>Sat, 10 Jul 2021 04:36:07 UT</pubDate>
      <dc:creator>Zach Stoebner</dc:creator>
      <guid>/projects/github-after-dark/</guid>
      <description>From knowing very little about webdev to everything (or at least most) you need to know, all in one place! The Hugo hosting docs and After Dark tutorial / docs are sufficient but unclear on the finer details. Here, I flesh those out to make this process as easy for prospective users as it truly should be.</description>
      <category domain="/categories/personal">Personal</category>
      <content:encoded><![CDATA[tl;dr From knowing very little about webdev to the bare minimum that you need to know, all in one place! The Hugo hosting docs and After Dark tutorial / docs are sufficient but unclear on the finer details. Here, I flesh those out to make this process as easy for prospective users as it truly should be.
Links Site source
Generated source
This site justifies my perfect website build.
How to Host Hosting Hugo
Steps to host a Hugo After Dark site on GitHub pages:
 Download the quick start code locally from the After Dark website. Run hugo to generate website files in public/. Host the generated files in public/ on the GitHub pages repo, i.e., a repo named [your username].github.io. Host the source files in the parent directory in a separate repo, with public/ ignored.  These are the files at the highest level, mainly Markdown files, that Hugo uses to build the static site.   Create a GitHub action or workflow in the source file repo. (optional)  Modifying source files and then pushing to source repo will trigger a rebuild and push of the public/ repo. Hugo offers a copy&amp;amp;paste workflow for this purpose in the docs.    Steps 3-4, in particular, are not clear on the Hugo docs for GitHub hosting. Fortunately, of the only two other people that I found online that specifically host After Dark on Github, one of them wrote an enlightening note that clarified the distinction between the two different directories. Hope that saves you some time!
How to After Dark Hugo After Dark
Most Hugo sites are run by themes, which define the site&amp;rsquo;s style, layout, and sometimes useful theme-specific shortcodes and advanced automatic features. However, not all themes are created equal and some will require a more advanced knowledge of Hugo to function. Thankfully, After Dark is one of the good ones if you&amp;rsquo;re a web novice.
What to Know  shortcodes: In Hugo, shortcodes are akin to functions that you can put in your Markdown files to improve them in some way, such as info blocks, buttons, and optimized images. list page vs. single page: after trial &amp;amp; error, I recommend creating directories for each single page and use _index.md to correspond to (non-leaf) list page directories, aka &amp;ldquo;sections&amp;rdquo;, and index.md for (leaf) single pages, aka &amp;ldquo;posts&amp;rdquo;. tip: for After Dark&amp;rsquo;s automatic features to kick in, you need content &amp;ndash; at least two posts in a section.  With After Dark, you technically only have to spend time in the parent directory writing in Markdown or slightly tweaking the config. However, since After Dark handles many neat features automatically, it can be too rigid and After Dark also requires some debugging. If you want to be all-powerful you need to understand Hugo &amp;hellip; and at least be able to read HTML and edit at the right place.
Bend To My Will! Disclaimer: Some of these workarounds may not be truly necessary and could simply be my misunderstanding the After Dark docs. Nonetheless, they work for me.
 Copy the /themes/after-dark/layouts/post/ directory to the parent directory&amp;rsquo;s /layouts/ folder. In the parent directory&amp;rsquo;s /layouts/ folder, create a _default/ directory and copy the single.html file from the post/ into _default/.  This overrides the default single.html for After Dark which, if you compare it to this new one, is rudimentary and doesn&amp;rsquo;t incorporate some of the interesting After Dark features. To me so far, it seems After Dark has a bug in it&amp;rsquo;s default handling of single-page, post-type content from schemas. I definitely suggest overriding the default layout files because it seems to solve the problem.
 Duplicate and rename the post/ directory from the above hack to the type of post for each section, e.g., project/ and note/ corresponding to the projects/ and notes/ section in my content.  This creates schemas for each section. No need to edit the HTML because After Dark&amp;rsquo;s post schema has the necessary components. This step doesn&amp;rsquo;t cause much change to section list / single page structure. Any post that specifies this schema in its front matter will apply the appropriate layout; this is preemptively useful if you plan to heavily customize specific sections.
Supposedly, if you want to have a featured list of posts for each section displayed at the top of section lsit pages and the bottom of a section&amp;rsquo;s single pages, then you need these schemas. Then, you need to add the correct blocks for each section to the config. However, I still have yet to get After Dark&amp;rsquo;s featured lists to work. Featured lists begin to work once you have multiple posts with similar tags. 
 Copy a list.html file from each of the schemas and paste into _default/. Rename them to the name of the section that the schema corresponds to, e.g., projects.html and notes.html.  I used this to hack the _index.md files for each section. Hugo natively won&amp;rsquo;t display any content in _index.md files which reside in non-leaf directories, but will for index.md which are leaf directories being the post-content of the site. However, you can override this by adding {{ .Content }} into the above HTML files below the header block. I hacked this to add alert blocks with the categories the following list of posts fall into; that way, readers can quicky jump to the taxonomy page for the content that they&amp;rsquo;re interested in.
 Partially copy the /themes/after-dark/layouts/partials/ directory, taking page-summary.html, toc-maybe.html, and post/meta.html. Modify page-summary.html by deleting lines 30 and 32.  Since the overridden default layouts call these, it&amp;rsquo;s easier to put them here and keep the relative paths. Randomly, there is a conditional block preventing the display of post metadata unless type = &amp;quot;post&amp;quot; in the front matter. To my knowledge, this doesn&amp;rsquo;t occur elsewhere in other After Dark source files and removing it immediately allowed for post metadata in listings.
 Copy /themes/after-dark/layouts/_default/baseof.html into /layouts/_default/ and add {{ template &amp;quot;_internal/google_analytics.html&amp;quot; . }} and {{ template &amp;quot;_internal/google_analytics_async.html&amp;quot; . }} into the &amp;lt;head&amp;gt; block. In config.toml, add the line googleAnalytics = &amp;lt;YOUR_MEASUREMENT_ID&amp;gt;.  I started reading about SEO because I want this site to be ranked as the top search result under my name. According to this academic personal website tutorial, Google Analytics categorizes the best keywords for achieving your SEO goals. Naturally, I am also interested in my site&amp;rsquo;s analytics so I linked up the site using Hugo&amp;rsquo;s Google Analytics templates, following this procedure.
References Cedric LeRoy
Sam Bateman
Mike Dane&amp;rsquo;s Hugo tutorial vids
]]></content:encoded>
    </item>
    <item>
      <title>on fast inverse square root</title>
      <link>/notes/fast-inv-sqrt/</link>
      <pubDate>Fri, 02 Jul 2021 03:46:27 UT</pubDate>
      <dc:creator>Zach Stoebner</dc:creator>
      <guid>/notes/fast-inv-sqrt/</guid>
      <description>I found it on YouTube and, as my friend Nolan reminded me the other night, this algorithm is not new. The fast inverse square root shook the nerd world with its implementation in Quake III (1999).</description>
      <category domain="/categories/algo">Algo</category>
      <content:encoded><![CDATA[float Q_rsqrt( float number ) { long i; float x2, y; const float threehalfs = 1.5F; x2 = number * 0.5F; y = number; i = * ( long * ) &amp;amp;y; // part 1 i = 0x5f3759df - ( i &amp;gt;&amp;gt; 1 ); // part 2 y = * ( float * ) &amp;amp;i; y = y * ( threehalfs - ( x2 * y * y ) ); // part 3 } I found it on YouTube and, as my friend Nolan reminded me the other night, this algorithm is not new. The fast inverse square root shook the nerd world with its implementation in Quake III (1999).
Notice that it doesn’t use any division operator which is naturally slow on a digital computer; this algorithm speeds up computation of the inverse square root by 3x compared to conventional division and square root operations. The reason for writing it in C is evident in the first part, although these tricks also have analogs in often in other languages such as C&#43;&#43;, Python, etc. and is thus implemented in those languages as well.
Part 1 It uses tricks inherent in the language to cast the address of float (aka a float pointer) to a long pointer. The importance of using a long is evinced in the second part because it allows for quick division by 2. Since standard binary numbers, unlike floats, are not disjointed numbers in base 2, a single right bit shift performs floor halving.
Part 2 This part is the real meat of the trickery in this clever solution. The second half I already explained in the first part but the first half involves rearranging the floating-point formula for a square root division to solve for scalar values. Recall that floating point numbers are comprised of a mantissa and an exponent. The actual digit number can then be composed of a formula of these two parts: (1 &#43; M/2^23)*2^(E - 127) . The exponent is shifted down by 127 in IEEE 754 in order to represent negative values so 2^4 is actually 2^(131-127) where 131 is the number passed in the exponent. Since the mantissa needs to be between 1 and 2 in binary a 1 is fixed as the first digit before the point and the mantissa is divided by 2^23 since the mantissa is represented by 23 bits. Taking the logarithm of the above formula results in: log(1&#43;M/2^23) &#43; log(2^(E - 127)) . The trick to the problem is that log(1&#43;x) ~= x &#43; mu for small numbers (e.g. fractions less than 1). So this simplifies to: M/2^23 &#43; mu &#43; E - 127. Rearranging results in: 1/2^23 * (M &#43; 2^23*E) &#43; mu - 127 which is much more useful because the bit representation of a floating point number (M &#43; 2^23*E) is included. Recall that the binary number for a floating number is 8 bits for E followed by 23 bits for M.
Now that the background is setup, we can continue calculating 1/sqrt(x), or actually 1/sqrt(y) in this case. With the rearrangements above, it becomes much easier to calculate the logarithm of a floating point number. So log(1/sqrt(y)) = log(y^(-1/2)) = -(1/2)*log(y) . So if we want to solve for some G s.t. G = 1/sqrt(y) where log(G) = -(1/2)log(y), we can substitute in the above rearranged logarithm formula for a floating point number and solve for the bit representation for G which ends up as: M_G &#43; 2^23*E_G = (3/2)*2^23*(127 - mu) - (1/2)*(M_y &#43; 2^23*E_y). Hence, the first term is that bizarre hexadecimal number and the dexter term is the subtracted single rightshift to halve the number.
The reason for casting the floating point y to a long should be fairly obvious; we need the hard-coded bit representation of y to be treated as such, not as a floating point number which has different arithmetic operators.
Part 3 The third step is a little esoteric but not as technical as the second step. As with everything on computers, the numbers computed prior to this step are just an approximation. Due to all of the assumptions previously made (e.g. that the halving above isn’t floored for an odd number, that our chosen mu is accurate, etc.), we need to correct by some amount. Cue the Newton Iteration, which computes the error of x from a root for the function y. For this problem, the function is f(y) = 1/y^2 - x which rearranges to y = 1/sqrt(x) when y is a root (e.g. f(y) = 0). We need to compute x_new = x - f(x)/f’(x). Breaking down the derivative of a function: the derivative is described by the tangent line and where it intercepts the x-axis, composing the triangle below:
 A useful reference for a function derivative.  Since the ratio of the shifts times the shift in x equals the shift in y, the shift in x can be solved for as the shift in y divided by the ratio which ends up as: f(x)/f’(x). The actual implementation details of this aren’t made clear by the video, nor is the function derivative computed and I’m quite uncertain about which variable we take the derivative from, x or y. Nonetheless, it results in a static expression without any division operators required.
]]></content:encoded>
    </item>
  </channel>
</rss>

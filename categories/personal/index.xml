<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>personal on Zach Stoebner | ml • neuro • kū</title>
    <link>/categories/personal/</link>
    <description>Recent content in personal on Zach Stoebner | ml • neuro • kū</description>
    <image>
      <title>personal on Zach Stoebner | ml • neuro • kū</title>
      <link>/categories/personal/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.2.3 (Hugo 0.81.0)</generator>
    <language>en-US</language>
    <copyright>Copyright &amp;copy; Zachary Stoebner. Licensed under CC-BY-ND-4.0.</copyright>
    <lastBuildDate>Tue, 05 Apr 2022 06:56:54 UT</lastBuildDate>
    <atom:link href="/categories/personal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>how to host a Hugo After Dark site on GitHub Pages: a saga</title>
      <link>/projects/github-after-dark/</link>
      <pubDate>Sat, 10 Jul 2021 04:36:07 UT</pubDate>
      <dc:creator>Zach Stoebner</dc:creator>
      <guid>/projects/github-after-dark/</guid>
      <description>From knowing very little about webdev to a very small amount more, all in one place! The Hugo hosting docs and After Dark tutorial / docs are sufficient but unclear on the finer details. Here, I flesh those out to make this process as easy for prospective users as it truly should be.</description>
      <category domain="/categories/personal">Personal</category>
      <content:encoded><![CDATA[ Perhaps the greatest mystery of our time, After Dark and its creater, Josh Habdas, have been seemingly yeeted from the Internet. Perhaps one day the prodigal son will return with his fatted cow... but until then I have slashed through now dead links.  tl;dr From knowing very little about webdev to the bare minimum that you need to know, all in one place! The Hugo hosting docs and After Dark tutorial / docs are sufficient but unclear on the finer details. Here, I flesh those out to make this process as easy for prospective users as it truly should be.
Links Site source
Generated source
This site justifies my perfect website build.
How to Host Hosting Hugo
Steps to host a Hugo After Dark site on GitHub pages:
 Download the quick start code locally from the After Dark website. Run hugo to generate website files in public/. Host the generated files in public/ on the GitHub pages repo, i.e., a repo named [your username].github.io. Host the source files in the parent directory in a separate repo, with public/ ignored.  These are the files at the highest level, mainly Markdown files, that Hugo uses to build the static site.   Create a GitHub action or workflow in the source file repo. (optional)  Modifying source files and then pushing to source repo will trigger a rebuild and push of the public/ repo. Hugo offers a copy&amp;amp;paste workflow for this purpose in the docs.    Steps 3-4, in particular, are not clear on the Hugo docs for GitHub hosting. Fortunately, of the only two other people that I found online that specifically host After Dark on Github, one of them wrote an enlightening note that clarified the distinction between the two different directories. Hope that saves you some time!
How to After Dark After Dark
Most Hugo sites are run by themes, which define the site&amp;rsquo;s style, layout, and sometimes useful theme-specific shortcodes and advanced automatic features. However, not all themes are created equal and some will require a more advanced knowledge of Hugo to function. Thankfully, After Dark is one of the good ones if you&amp;rsquo;re a web novice.
What to Know  shortcodes: In Hugo, shortcodes are akin to functions that you can put in your Markdown files to improve them in some way, such as info blocks, buttons, and optimized images. list page vs. single page: after trial &amp;amp; error, I recommend creating directories for each single page and use _index.md to correspond to (non-leaf) list page directories, aka &amp;ldquo;sections&amp;rdquo;, and index.md for (leaf) single pages, aka &amp;ldquo;posts&amp;rdquo;. tip: for After Dark&amp;rsquo;s automatic features to kick in, you need content &amp;ndash; at least two posts in a section.  With After Dark, you technically only have to spend time in the parent directory writing in Markdown or slightly tweaking the config. However, since After Dark handles many neat features automatically, it can be too rigid and After Dark also requires some debugging. If you want to be all-powerful you need to understand Hugo &amp;hellip; and at least be able to read HTML and edit at the right place.
Bend To My Will! Disclaimer: Some of these workarounds may not be truly necessary and could simply be my misunderstanding the After Dark docs. Nonetheless, they work for me.
 Copy the /themes/after-dark/layouts/post/ directory to the parent directory&amp;rsquo;s /layouts/ folder. In the parent directory&amp;rsquo;s /layouts/ folder, create a _default/ directory and copy the single.html file from the post/ into _default/.  This overrides the default single.html for After Dark which, if you compare it to this new one, is rudimentary and doesn&amp;rsquo;t incorporate some of the interesting After Dark features. To me so far, it seems After Dark has a bug in it&amp;rsquo;s default handling of single-page, post-type content from schemas. I definitely suggest overriding the default layout files because it seems to solve the problem.
 Duplicate and rename the post/ directory from the above hack to the type of post for each section, e.g., project/ and note/ corresponding to the projects/ and notes/ section in my content.  This creates schemas for each section. No need to edit the HTML because After Dark&amp;rsquo;s post schema has the necessary components. This step doesn&amp;rsquo;t cause much change to section list / single page structure. Any post that specifies this schema in its front matter will apply the appropriate layout; this is preemptively useful if you plan to heavily customize specific sections.
Supposedly, if you want to have a featured list of posts for each section displayed at the top of section lsit pages and the bottom of a section&amp;rsquo;s single pages, then you need these schemas. Then, you need to add the correct blocks for each section to the config. However, I still have yet to get After Dark&amp;rsquo;s featured lists to work. Featured lists begin to work once you have multiple posts with similar tags. 
 Copy a list.html file from each of the schemas and paste into _default/. Rename them to the name of the section that the schema corresponds to, e.g., projects.html and notes.html.  I used this to hack the _index.md files for each section. Hugo natively won&amp;rsquo;t display any content in _index.md files which reside in non-leaf directories, but will for index.md which are leaf directories being the post-content of the site. However, you can override this by adding {{ .Content }} into the above HTML files below the header block. I hacked this to add alert blocks with the categories the following list of posts fall into; that way, readers can quicky jump to the taxonomy page for the content that they&amp;rsquo;re interested in.
 Partially copy the /themes/after-dark/layouts/partials/ directory, taking page-summary.html, toc-maybe.html, and post/meta.html. Modify page-summary.html by deleting lines 30 and 32.  Since the overridden default layouts call these, it&amp;rsquo;s easier to put them here and keep the relative paths. Randomly, there is a conditional block preventing the display of post metadata unless type = &amp;quot;post&amp;quot; in the front matter. To my knowledge, this doesn&amp;rsquo;t occur elsewhere in other After Dark source files and removing it immediately allowed for post metadata in listings.
 Copy /themes/after-dark/layouts/_default/baseof.html into /layouts/_default/ and add {{ template &amp;quot;_internal/google_analytics.html&amp;quot; . }} and {{ template &amp;quot;_internal/google_analytics_async.html&amp;quot; . }} into the &amp;lt;head&amp;gt; block. In config.toml, add the line googleAnalytics = &amp;lt;YOUR_MEASUREMENT_ID&amp;gt;.  I started reading about SEO because I want this site to be ranked as the top search result under my name. According to this academic personal website tutorial, Google Analytics categorizes the best keywords for achieving your SEO goals. Naturally, I am also interested in my site&amp;rsquo;s analytics so I linked up the site using Hugo&amp;rsquo;s Google Analytics templates, following this procedure.
References Cedric LeRoy
Sam Bateman
Mike Dane&amp;rsquo;s Hugo tutorial vids
]]></content:encoded>
    </item>
    <item>
      <title>learning about quadcopters by building one</title>
      <link>/projects/quad-build/</link>
      <pubDate>Thu, 01 Jul 2021 21:57:10 UT</pubDate>
      <dc:creator>Zach Stoebner</dc:creator>
      <guid>/projects/quad-build/</guid>
      <description>My introduction to quadcopters and robotics in which I learned a lot about the quad ecosystem and their constitution. However, I suggest following a smaller, cheaper, and more recent build guide. Although my naivete showed through here, my fascination with quads has not soured; check out my Tello face following and vSLAM project!</description>
      <category domain="/categories/personal">Personal</category>
      <content:encoded><![CDATA[ My fully built quadcopter on the ground, not flying... yet.  tl;dr My introduction to quadcopters and robotics in which I learned a lot about the quad ecosystem and their constitution. However, I suggest following a smaller, cheaper, and more recent build guide. Although my naivete showed through here, my fascination with quads has not soured; check out my Tello face following and vSLAM project!
Motivation As much as I like software, I also like hardware. I quickly realized that pure computer science wasn&amp;rsquo;t going to expose me to much hardware so I took it upon myself in summer 2020 &amp;ndash; mid-quarantine &amp;ndash; to teach myself. At the time, I was stumbling down a rabbit hole and obsessing over quadcopters, yet I had never laid my hands on one. To me at the time, building a quad from parts was as good a place to start as any.
Cost To make the journey as painless as possible, I followed a build from a $15 Udemy course that was apparently not a moneymaker because it is no longer listed. The build that I followed was not current; the drone industry moves fast and parts will shift in and out of compatibility. You can find potentially better, much cheaper, sufficiently thorough builds on YouTube. The community is dedicated so up-to-date build guides are very likely.
If you don&amp;rsquo;t need tools, then this build is approx $500. Again, there are budget drone builds, that are current and probably more satisfying &amp;ndash; don&amp;rsquo;t reinvent the wheel. Or, you could buy a $100 Tello and program the hell out of it.
Part List Disclaimer: some of these parts may no longer be available.
Raspberry Pi: https://amzn.to/2mrd72g
NAVIO Kit (Need Power module, wires and GPS): https://store.emlid.com/product/navio2/?wpam_id=3
ESCs 4 PACK: https://amzn.to/2kTweBt
Motors 4 PACK: https://amzn.to/2ltKilA
RC Controller: https://amzn.to/2n05Zdq
Frame: https://amzn.to/2mSmNCW
Props: https://amzn.to/2my3w9C
Battery: https://amzn.to/2kSlzHe
Battery Charger: https://amzn.to/2kXA1hi
Telemetry: https://amzn.to/2myfH6l
LiPo Fire-proof Case: https://amzn.to/2lsRu1i
PPM Encoder: https://amzn.to/2n1hjWR
Micro SD Card: https://amzn.to/2lvcJiS
Micro SD to USB: https://amzn.to/2n09yQQ
Battery Connector: https://amzn.to/2ltOP7A or https://amzn.to/2n0a3KI
GPS Mount: https://amzn.to/2luGOiz
Velcro Straps: https://amzn.to/2lsloTe
Scotch Mounting Tape: https://amzn.to/2mSsdxM
Zip Ties: https://amzn.to/2lveUTA
Additional tools if needed:
Soldering Iron Kit: https://amzn.to/2kZklKw
Helping Hands: https://amzn.to/2lvfxwq
Allen Wrench: https://amzn.to/2mVFfus
Electrical Tape: https://amzn.to/2ls4Niv
Spacer Kit: https://amzn.to/2NTIyeY
Drill and Drill Bits: https://amzn.to/2SQrZBK
Lessons Building a drone is easy, getting it to fly is hard. Soldering, plugging, and fixing hardware to the frame is like legos. Flashing the flight OS onto the Raspberry Pi &#43; Navio2 flight controller is no problem. Finding a functioning ground control software from this century = yikes. Then you just have to pray that it&amp;rsquo;s compatible with your flight controller.
On a side note, this drone is deceptively big. Although I&amp;rsquo;m not an expert aerospace engineer, I deduce that getting big things to fly is much more of a hassle than for small things, especially if you live in an apartment in the city.
One super fun takeaway: learning how components connect to the whole quad, how they communicate with each other, and how a full-fledged cyberphysical system can come together was extremely rewarding.
Large quad with exposed wires and point ends = the ultimate cat chew-toy
Future Off and on, I may try to get this quad flying. However, it will likely remain a trophy of my first foray into quads, and also a testament to my initial learning curve. As I&amp;rsquo;ve hinted at many times, I soon intend to follow a smaller, cheaper build. Most importantly, I&amp;rsquo;m excited to take what I learned here and apply it broadly to other hardware projects.
References  Caleb Bergquist, instructor of the long lost Udemy course Joshua Bardwell https://ardupilot.org/copter/docs/common-navio2-overview.html  ]]></content:encoded>
    </item>
  </channel>
</rss>
